{\rtf1\ansi\ansicpg1252\cocoartf1348\cocoasubrtf170
\cocoascreenfonts1{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fswiss\fcharset0 ArialMT;\f2\fnil\fcharset0 Calibri;
}
{\colortbl;\red255\green255\blue255;\red38\green38\blue38;\red255\green0\blue0;\red47\green38\blue255;
}
\margl1440\margr1440\vieww20700\viewh22740\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs24 \cf0 @
\fs28 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\b\fs38 \cf0 \ul \ulc0 Setting Up the Phase Retrieval Software
\b0\fs28 \ulnone \
\
This is only required the first time you run the software\
1.) \
Copy the directory:\
in to a local working directory.\
\
2.) \
Edit "fitpsf.pro" and "mkfocusin.pro", setting "fitpsf_dir" to the appropriate directory.\
(you can then chmod ugo-w so the code is not accidentally modifed)\
\
3.)\
Add the code directory to the IDL_PATH\
I do this by including in .mysetenv the the line\
\
setenv IDL_PATH /Users/cox/Documents/fitpsf/:$IDL_PATH\
\
which adds this new path to the existing IDL_PATH\
You will use the path you have chosen.\
Then make sure your .cshrc file includes  source .mysetenv\
\
4.) In X11 preferences, go to the \'93Windows\'94 tab and ensure that \'93Click-through Inactive Windows\'94  and \'93Focus On New Windows\'94 are enabled.\
\

\b\fs38 \ul Running the Phase Retrieval Software on the Focus Monitor Data\

\b0\fs28 \ulnone \
There are a few steps in processing the data.  First, you run a program to set\
up the input file lists.  Then, you have to go through each image to select \
the PSF(s) and mark any bad pixels.  After that, you run a program that creates\
input parameter files for the phase retrieval software.  Then you run the\
software that actually does the fitting.  After everything is done, you run\
another program that creates a list of focus values and the plot.\
\
\
4.) Create directory for a single month's data\
\
5.) Extract data from archive  into directory, You only need calibrated data, FLT files.\
\
6.) Open a terminal, change to the directory containing the new set of data and start IDL\
\
7.) Create catalog of image files and separate lists for each represented instrument\
      IDL> collect\
	This is a script which runs the  programs catfits and mkfocuslist.\
	catfits creates files.txt which contains rows giving the file name, target, filter, Julian time, exposure, date and time,  gain, orient, detector,  and 	for ACS the postarg.\
	Then mkfocuslist provides lists of file names for each detector for wfit to use. (PC and HRC no longer appear)\
\

\b\fs38 \ul  Processing the WFC3 files\

\b0\fs28 \ulnone \
If the WFC3 data is in the form of subarrays, first run WFC3ImageExtensioner.py  This inserts the subarray into the full frame that the code is expecting, replacing the flt file with a new larger one. \
The command needed is \
\

\f1\i python /grp/hst/OTA/focus/source/PhaseRetrievalCodes/python/
\f0 WFC3ImageExtensioner.py
\i0 \
\
Paste the above line into a second terminal window in the same data directory but in which IDL is not running.\
You can keep this terminal open for the processes used at the end to run python programs which collect the data and obtain plots\
\
\pard\pardeftab720\sl360

\f1\i\fs32 \cf2 WFC3ImageExtensioner.py
\i0\fs28 \
\'a0\'a0 \'a0 - This script can be used to embed subarray WFC3 observations to a full frame.\
\'a0\'a0 \'a0 - The script should be run inside the folder where the files to be expanded are located.\
\'a0\'a0 \'a0 - The script touches files that are the "i*_flt.fits" form and modifies them 
\i in place
\i0 . Note, however, that the script does not check if the file is already full-frame so the script should not be run in a folder where there are both subarray and full-frame files.\
     - If the extensioner program finds a mix of UVIS1 & UVIS2 subarrays then it will also create filename lists called WFC3UVIS1 and WFC3UVIS2 which can be used by wfit in place of "wfc3" which is created by mkfocuslist.\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0 \cf0 \

\b\fs38 \ul Processing the image  files\

\b0\fs28 \ulnone \
8.) Start up "wfit":\
\
	IDL> wfit\
\
9.) Choose one of the  cameras. The wavelength can be left at 0.502 or changed, \
\
10.) Press the "Go" button.  \
\
11.) Now you will be in a loop marking the star,   refining the center, then marking bad pixels.  \
This process outputs _flt.cos (bad pixel map) and _flt.dat (star location and background) for each image.\
\
12.) Go to "Running the Fitting Software"  after isolating one given star. Repeat process with other stars if measured. \
\
13.) When all images containing a given chip have been processed, i.e when no more images appear, press the "Exit" button.\
\

\b\fs38 \ul  Running the Fitting Software\

\b0\fs28 \ulnone \
15.) 	IDL> mkfocusin\
\
	You will be prompted to choose the camera ACS or WFC3 (upper or lower case).\
	Next choose chip 1 or 2\
\
This creates the .in file for each image containing the zernike coefficient initial guesses and flags to fit, fix, or ignore. Also creates the batch command files for each camera  dowfc.pro, or dowfc3.pro.\
\
15 - ALTERNATIVE.) - Handle terms with spatial dependence\
\
Like the above, this step will create the .in files for each image, as well as the batch command files. However, the below command also parses the .dat files created during the wfit process to find the source x, y and create a unique input file for each image. To run it, call:\
\
python /grp/hst/OTA/focus/source/KVG/hubble-focus/hubble_focus/parameters.py <camera> <chip>.\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural
\cf0 where <camera> is \'93ACS\'94 or \'93WFC3\'94 and <chip> is 1 or 2. By default, this sets the x-coma, y-coma, x-astigmatism, y-astigmatism, and spherical terms to fixed values by evaluating 3rd-order polynomials stored at  /grp/hst/OTA/focus/source/KVG/hubble-focus/hubble_focus/coefficients.\
\
16.) Run the phase retrieval software on the ACS/WFC images:\
\
	IDL> @dowfc or @dowfc3\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\b\fs38 \cf0 \ul  Tabulating Results\

\b0\fs28 \ulnone \
17.) Log results\
\
	IDL> focusresults\
\
    Uses "files.txt" to look for matching .par file and then display a table that contains \
    the times and focus values (in microns of secondary despace).  It will \
    also display a plot of the focus values.
\b \cf3 \

\b0 \cf0 Its output file is "results.txt". Each time focusresults runs it appends to results.txt\
\
Starting with the same chip number for both WFC3 and ACS/WFC, go through both SIs and each star needing to be measured. NOTE it is important to run focusresults each time (i.e. for each particular star) to append the latest phase retrieval target results to the file. Otherwise data in the .par files will be overwritten. \
\
When done with everything pertaining to a given chip number for both cameras (e.g. WFC1 & UVIS1), rename the results.txt to "resultsChip1.txt" then repeat the whole process for chip2, renaming the new results.txt to "resultsChip2.txt"\
\
If you do not follow this order, you may have mixed chip1 and chip2 values in results.txt. This is not a problem as long as you copy only chip1 values into resultsChip1.txt and chip 2 values into resultsChip2.txt. Take care not to copy multiple sets of results from the same star into these files. These latter two files are the only ones used for subsequent steps.  \
\

\b\fs38 \ul  Post-processing analysis and plotting\
\pard\pardeftab720\sl460

\f1\i\b0\fs36 \cf2 \ulnone From Niemi (June 2011)\

\i0\fs40 Focus Plots:
\fs28 \
The latest versions of all final output plots are located in
\i \'a0/grp/hst/OTA/focus/Results/SMN/plots/
\i0 \
This folder contains also the data that have been used to produce the focus plots, see\'a0AllData.txt and\'a0BreathingCorrectedData.txt.\
\

\b\fs34 Analysis Codes: \
\pard\pardeftab720

\i\b0\fs28 \cf2 (
\i0 python scripts are found under
\b\fs34  
\i\b0\fs28 /grp/hst/OTA/focus/source/phaseretrievalcodes/python. 
\i0 They can be run from the working "visit" directory)\
\
\pard\pardeftab720\sl360
\cf2 \'a0\'a0 \'a0 - Note that the breathing model output file needs to be present in the same directory in which the script is run and the file should be called "
\i breathing.txt
\i0 ". Run the web-based focus model for the time-period encompassing the period from one hour before the visit to the end of the visit and save the output file in the visit directory with the name "
\i breathing.txt"
\i0 .\
\pard\pardeftab720
\cf2 \
The simplest way to run these python scripts is to first exit from IDL and then type\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural
\cf2 	
\i \cf0 python /grp/hst/OTA/focus/source/PhaseRetrievalCodes/python/phaseretrievalresults.py\

\i0 \
To save typing and probable error, you can cut and paste the line above into your terminal. To run the next two python programs you can then back up to this command and overwrite the program name with the succeeding one.
\i \cf2 \
\pard\pardeftab720\sl360

\i0 \cf2 \
\pard\pardeftab720
\cf2 \
\
\pard\pardeftab720\sl360

\i\fs32 \cf2 18.) 
\i0\b phaseretrievalresults.py
\b0\fs28 \
\'a0\'a0 \'a0 - This script can be run after the results files described in step 19 have been created ("resultsChipN.txt")\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural
\cf2 \'a0\'a0 \'a0 - The script calculates both model corrected and raw focus values and outputs this information to stdout.\'a0\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\b \cf2 	Take these output lines and copy them into AllData.txt and\'a0BreathingCorrectedData.txt (under 
\i /grp/hst/OTA/focus/Results/SMN/plots/)\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural

\b0 \cf2      - 
\i0 \cf0 The output to be used will just be the first and last few lines of the screen output and includes only average values of the measurements.\
\pard\pardeftab720\sl360
\cf2 \'a0\'a0 \'a0 - Note that the script assumes that the measured focus values are in two files called "
\i resultsChip1.txt
\i0 " and "
\i resultsChip2.txt
\i0 ". Both ACS and WFC3 measurements can be mixed in the same file, however, the two detectors (UVIS/WFC 1 and 2) should be separated. The fitPSF2 code creates results.txt. Note however that every time focusresults.pro is run it appends the results to this file, so the same star may appear more than once and cause biased weighting when calculating the mean focus if not removed before renaming the file.\
\'a0\'a0 \'a0 - The script produces some diagnostic plots (look for PDF files after running the script) that can be used to check the scatter and how well the breathing model correction worked.\
INPUT: "resultsChipN.txt" & "breathing.txt"\
OUTPUT: Fullfocus.pdf, obsnameStarsChip.pdf, FullfocusNobreathing.pdf, Fullfocus.pdf\
\

\i\fs32 19.) 
\i0\b FocusPlots.py
\b0\fs28 \
\'a0\'a0 \'a0 - This script is used for  more focus model plots and analysis.\
\'a0\'a0 \'a0 - The script looks for AllData.txt and BreathingCorrectedData.txt from\'a0/grp/hst/OTA/focus/Results/SMN/plots/.\
\'a0\'a0 \'a0 - The script produces all the basic focus plots including the confocality and outputs some numerical values such as the exponential coefficients and zero-crossing dates to stdout. The plots are placed in 
\i \cf0 /grp/hst/OTA/focus/Results/SMN/plots/
\i0 \cf2 \
\pard\pardeftab720\sl360

\b \cf2 NOTE this script calls hstfocus.py which contains the secondary mirror moves and must be maintained to include all mirror moves to date. 
\b0 \
\
\
\pard\pardeftab720\sl460

\b \cf2 \
\pard\pardeftab720\sl360

\i\b0\fs32 \cf2 20.) 
\i0\b CollectFocus.py
\b0\fs28 \
\'a0\'a0 \'a0 - This scripts takes the results produced by fitPSF2 (the script looks for\'a0"
\i resultsChip1.txt
\i0 " and "
\i resultsChip2.txt
\i0 " files that are located in /grp/hst/OTA/focus/Data/....)\'a0and appends the results to files located in\'a0/grp/hst/OTA/focus/source/FocusModel/ so that Colin's focus model tool can find these results and show them when using the comparison feature of the webtool.\
\'a0\'a0 \'a0 - One should 
\i\b change the path of the input data every time the proposal number changes
\i0  
\b0 as the path is hardcoded into the script.\
\pard\pardeftab720\sl360
\cf4 (An alternative here is to make the proposal number in an input to collect_focus.py or have it ask you the proposal number  The question is which is more annoying, entering this number once a month or remembering to change the code once a year.)\
\pard\pardeftab720\sl360
\cf2 \

\i\fs32 WFC3ImageExtensioner.py
\i0\fs28 \
\'a0\'a0 \'a0 - This script can be used to embed subarray WFC3 observations to a full frame.\
\'a0\'a0 \'a0 - The script should be run inside the folder where the files to be expanded are located.\
\'a0\'a0 \'a0 - The script touches files that are the "i*_flt.fits" form and modifies them 
\i in place
\i0 . Note, however, that the script does not check if the file is already full-frame so the script should not be run in a folder where there are both subarray and full-frame files.\
     - If the extensioner program finds a mix of UVIS1 & UVIS2 subarrays then it will also create filename lists called WFC3UVIS1 and WFC3UVIS2 which can be used by wfit in place of "wfc3" which is created by mkfocuslist.\
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0 \cf0 \

\b\fs38 \ul  Additional Information\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f1\b0\fs28 \cf2 \ulnone \
\pard\pardeftab720\sl460
\cf2 Niemi's whole local TEL folder can be located in\'a0/grp/hst/OTA/focus/tmp/ if needed. \
\
\pard\pardeftab720\sl460

\fs34 \cf2 Cronjobs (now running on Colin's desktop):
\fs28 \
22\'a0\'a0\'a0\'a0\'a0 5\'a0\'a0\'a0\'a0\'a0\'a0 *\'a0\'a0\'a0\'a0\'a0\'a0 *\'a0\'a0\'a0\'a0\'a0\'a0 1,2,3,4,5\'a0\'a0\'a0\'a0\'a0\'a0 python2.5 /grp/hst/OTA/focus/source/FocusModel/UpdateTemps\
22\'a0\'a0\'a0\'a0\'a0 5\'a0\'a0\'a0\'a0\'a0\'a0 *\'a0\'a0\'a0\'a0\'a0\'a0 *\'a0\'a0\'a0\'a0\'a0\'a0 1,2,3,4,5\'a0\'a0\'a0\'a0\'a0\'a0 python /grp/hst/OTA/focus/source/PhaseRetrievalCodes/python/collect_focus.py\
\
\pard\pardeftab720

\f2\fs32 \cf0 \
\
}